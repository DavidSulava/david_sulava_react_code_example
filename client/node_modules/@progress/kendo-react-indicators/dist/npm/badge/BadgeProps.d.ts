/// <reference types="react" />
/**
 * Represents the props of the [KendoReact Badge component]({% slug overview_badge %}).
 */
export interface BadgeProps {
    /**
     * The React elements that will be rendered inside the Badge.
     */
    children?: React.ReactNode;
    /**
     * Specifies a list of CSS classes that will be added to the Badge.
     */
    className?: string;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Sets additional CSS styles to the Badge.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the size of the Badge.
     *
     * The possible values are:
     * * `small`
     * * `medium` (Default)
     * * `large`
     *
     */
    size?: BadgeSize;
    /**
     * Specifies the appearance fill style of the Badge.
     *
     * The possible values are:
     * * `solid` (Default)
     * * `outline`
     *
     */
    fill?: BadgeFill;
    /**
     * Specifies the theme color of the Badge.
     *
     * The possible values are:
     * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `inherit`&mdash; Applies inherited coloring value.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverse`&mdash; Applies coloring based on inverse theme color.
     */
    themeColor?: BadgeThemeColor;
    /**
     * Specifies the shape of the Badge.
     *
     * The possible values are:
     * * `circle` (Default)&mdash;Applies circular shape on the Badge.
     * * `rectangle`&mdash;Applies no border radius on the Badge.
     * * `rounded`&mdash;Applies default border radius on the Badge.
     * * `dot`&mdash;Applies dot shape on the Badge.
     * * `pill`&mdash;Applies border radius equal to half of the height of the Badge.
     *
     */
    shape?: BadgeShape;
    /**
     * Specifies the alignment of the Badge.
     *
     * The possible keys are:
     * * `horizontal`&mdash; Defines the possible horizontal alignment of the Badge.
     *   * `start`&mdash;Uses the start point of the parent element.
     *   * `end`(Default)&mdash;Uses the end point of the parent element.
     * * `vertical`&mdash; Defines the possible vertical alignment of the Badge.
     *   * `top`(Default)&mdash;Uses the top point of the parent element.
     *   * `bottom`&mdash;Uses the bottom point of the parent element.
     *
     */
    align?: BadgeAlign;
    /**
     * Specifies the position of the Badge relative to the edge of the container element.
     *
     * The possible values are:
     * * `edge` (Default)&mdash;The center of the Badge is positioned on the edge of the container element.
     * * `outside`&mdash;The Badge is entirely positioned outside the edge of the container element.
     * * `inside`&mdash;The Badge is entirely positioned inside the edge of the the container element.
     *
     */
    position?: BadgePosition;
    /**
     * Specifies wether or not to render additional "cutout" border around the Badge.
     *
     * The possible values are:
     * * `true`
     * * `false` (Default)
     *
     */
    cutoutBorder?: boolean;
}
/**
 * Specifies the theme color of the Badge.
 *
 * The possible values are:
 * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
 * * `secondary`&mdash;Applies coloring based on secondary theme color.
 * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
 * * `inherit`&mdash; Applies inherited coloring value.
 * * `info`&mdash;Applies coloring based on info theme color.
 * * `success`&mdash; Applies coloring based on success theme color.
 * * `warning`&mdash; Applies coloring based on warning theme color.
 * * `error`&mdash; Applies coloring based on error theme color.
 * * `dark`&mdash; Applies coloring based on dark theme color.
 * * `light`&mdash; Applies coloring based on light theme color.
 * * `inverse`&mdash; Applies coloring based on inverse theme color.
 *
 */
export declare type BadgeThemeColor = 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'error' | 'dark' | 'light' | 'inverse' | 'inherit';
/**
 * Specifies the size of the Badge.
 *
 * The possible values are:
 * * `small`
 * * `medium` (Default)
 * * `large`
 *
 */
export declare type BadgeSize = 'small' | 'medium' | 'large';
/**
 * Specifies the shape of the Badge.
 *
 * The possible values are:
 * * `circle` (Default)&mdash;Applies circular shape on the Badge.
 * * `rectangle`&mdash;Applies no border radius on the Badge.
 * * `rounded`&mdash;Applies default border radius on the Badge.
 * * `dot`&mdash;Applies dot shape on the Badge.
 * * `pill`&mdash;Applies border radius equal to half of the height of the Badge.
 *
 */
export declare type BadgeShape = 'circle' | 'rectangle' | 'rounded' | 'dot' | 'pill';
/**
 * Specifies the horizontal and vertical alignment of the Badge in a relation to the element.
 */
export interface BadgeAlign {
    /**
     * Defines the possible horizontal alignment of the Badge.
     *
     * The available values are:
     * - `start`&mdash;Uses the start point of the parent element.
     * - `end`(Default)&mdash;Uses the end point of the parent element.
     */
    horizontal: 'start' | 'end';
    /**
     * Defines the possible vertical alignment of the Badge.
     *
     * The available values are:
     * - `top`(Default)&mdash;Uses the top point of the parent element.
     * - `bottom`&mdash;Uses the bottom point of the parent element.
     */
    vertical: 'top' | 'bottom';
}
/**
 * Specifies the appearance fill style of the Badge.
 *
 * The possible values are:
 * * `solid` (Default)
 * * `outline`
 *
 */
export declare type BadgeFill = 'solid' | 'outline';
/**
 * Specifies the position of the Badge relative to the edge of the container element.
 *
 * The possible values are:
 * * `edge` (Default)&mdash;The center of the Badge is positioned on the edge of the container element.
 * * `outside`&mdash;The Badge is entirely positioned outside the edge of the container element.
 * * `inside`&mdash;The Badge is entirely positioned inside the edge of the the container element.
 *
 */
export declare type BadgePosition = 'edge' | 'outside' | 'inside';
