import * as React from 'react';
import * as PropTypes from 'prop-types';
import { classNames, useDir } from '@progress/kendo-react-common';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
/**
 * Represents the [KendoReact Badge component]({% slug overview_badge %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <Badge>99+</Badge>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var Badge = React.forwardRef(function (props, target) {
    validatePackage(packageMetadata);
    var children = props.children, className = props.className, style = props.style;
    var elementRef = React.useRef(null);
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    React.useImperativeHandle(target, function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); });
    var dir = useDir(elementRef, props.dir);
    var size = React.useMemo(function () { return props.size || defaultProps.size; }, [props.size]);
    var fill = React.useMemo(function () { return props.fill || defaultProps.fill; }, [props.fill]);
    var themeColor = React.useMemo(function () { return props.themeColor || defaultProps.themeColor; }, [props.themeColor]);
    var shape = React.useMemo(function () { return props.shape || defaultProps.shape; }, [props.shape]);
    var cutoutBorder = React.useMemo(function () { return props.cutoutBorder || defaultProps.cutoutBorder; }, [props.cutoutBorder]);
    var position = React.useMemo(function () { return props.position || defaultProps.position; }, [props.position]);
    var align = React.useMemo(function () { return props.align || defaultProps.align; }, [props.align]);
    var badgeClasses = React.useMemo(function () { return classNames('k-badge', {
        'k-badge-sm': size === 'small',
        'k-badge-md': size === 'medium',
        'k-badge-lg': size === 'large',
        'k-badge-solid': fill === 'solid',
        'k-badge-outline': fill === 'outline',
        'k-badge-primary': themeColor === 'primary',
        'k-badge-secondary': themeColor === 'secondary',
        'k-badge-tertiary': themeColor === 'tertiary',
        'k-badge-info': themeColor === 'info',
        'k-badge-success': themeColor === 'success',
        'k-badge-warning': themeColor === 'warning',
        'k-badge-error': themeColor === 'error',
        'k-badge-dark': themeColor === 'dark',
        'k-badge-light': themeColor === 'light',
        'k-badge-inverse': themeColor === 'inverse',
        'k-badge-inherit': themeColor === 'inherit',
        'k-badge-circle': shape === 'circle',
        'k-badge-rectangle': shape === 'rectangle',
        'k-badge-rounded': shape === 'rounded',
        'k-badge-dot': shape === 'dot',
        'k-badge-pill': shape === 'pill',
        'k-badge-border-cutout': cutoutBorder,
        'k-badge-edge': position === 'edge',
        'k-badge-outside': position === 'outside',
        'k-badge-inside': position === 'inside',
        'k-top-start': align.vertical === 'top' && align.horizontal === 'start',
        'k-top-end': align.vertical === 'top' && align.horizontal === 'end',
        'k-bottom-start': align.vertical === 'bottom' && align.horizontal === 'start',
        'k-bottom-end': align.vertical === 'bottom' && align.horizontal === 'end'
    }, className); }, [
        size, fill, themeColor,
        shape, cutoutBorder, align,
        position, className
    ]);
    return (React.createElement("span", { className: badgeClasses, style: style, dir: dir }, children));
});
Badge.propTypes = {
    className: PropTypes.string,
    dir: PropTypes.string,
    style: PropTypes.object,
    align: PropTypes.shape({
        vertical: PropTypes.oneOf(['top', 'bottom']),
        horizontal: PropTypes.oneOf(['start', 'end'])
    }),
    size: PropTypes.oneOf(['small', 'medium', 'large']),
    fill: PropTypes.oneOf(['solid', 'outline']),
    themeColor: PropTypes.oneOf([
        'primary', 'secondary', 'tertiary',
        'info', 'success', 'warning',
        'error', 'dark', 'light', 'inverse', 'inherit'
    ]),
    shape: PropTypes.oneOf(['circle', 'rectangle', 'rounded', 'dot', 'pill']),
    position: PropTypes.oneOf(['edge', 'outside', 'inside']),
    cutoutBorder: PropTypes.bool
};
var defaultProps = {
    size: 'medium',
    fill: 'solid',
    themeColor: 'primary',
    shape: 'circle',
    position: 'edge',
    align: { vertical: 'top', horizontal: 'end' },
    cutoutBorder: false
};
Badge.defaultProps = defaultProps;
Badge.displayName = 'KendoBadge';
